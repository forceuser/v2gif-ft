*,
*:after,
*:before {
  box-sizing: border-box;
  background: none;
  color: inherit;
  font: inherit;
  padding: 0;
  margin: 0;
  outline: none;
  border: none;
  box-shadow: none;
  vertical-align: top;
  min-height: 0;
  min-width: 0;
  -webkit-tap-highlight-color: transparent;
}
html,
body {
  height: 100%;
}
html {
  font-family: sans-serif;
  font-size: 1px;
  background: #eee;
}
body {
  font-size: 16rem;
  color: #333;
  overflow: hidden;
}
html.standalone body {
  overflow-y: hidden;
}
body > svg {
  position: absolute;
  width: 0;
  height: 0;
  z-index: -1;
  overflow: hidden;
  opacity: 0;
}
.grecaptcha-badge {
  display: none !important;
}
.form {
  overflow: hidden;
  display: flex;
  flex: 1;
  flex-direction: column;
  height: 100%;
  width: 100%;
  transform: scale(1);
  box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.3);
}
.form .update-indicator {
  background: #f4f4f4;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 0px;
  overflow: hidden;
  position: relative;
}
.form .update-indicator mini-loader {
  opacity: 0;
  color: var(--color--primary);
  transition: all 0.3s ease;
}
.form .update-indicator.active mini-loader {
  opacity: 1;
}
.form .form-image-wrapper {
  display: flex;
  justify-content: center;
}
.form .form-field {
  font-size: 18rem;
}
.form .form-image {
  height: 160rem;
}
.form .form-header {
  background: #fafafa;
  box-shadow: 0 3px 3px rgba(0, 0, 0, 0.12);
  color: black;
  padding: 16rem 24rem;
  display: flex;
  flex-direction: column;
  min-height: 42rem;
  justify-content: flex-start;
  position: relative;
  z-index: 1;
}
.form .form-header .header-actions {
  margin-bottom: 8rem;
}
.form .form-header .header-actions .action {
  width: 24rem;
  height: 24rem;
  cursor: pointer;
}
.form .form-header .form-caption {
  font-size: 18rem;
  font-weight: bold;
  line-height: 24rem;
}
.form .form-notification-wrapper {
  position: sticky;
  top: 0px;
  text-align: center;
  font-size: 14rem;
  font-weight: normal;
  z-index: 200;
  color: white;
}
.form .form-notification-wrapper.notification-error {
  background-color: var(--color--error);
}
.form .form-notification-wrapper.notification-info {
  background-color: var(--color--info);
}
.form .form-notification-wrapper.notification-warning {
  background-color: var(--color--warning);
}
.form .form-notification-wrapper.notification-success {
  background-color: var(--color--success);
}
.form .form-notification-wrapper .form-notification {
  padding: 8rem;
}
.form .form-body-wrapper {
  flex: 1 1 auto;
  height: 0;
  min-height: 140px;
  overflow: auto;
  overflow: overlay;
  background: var(--color--bg);
  max-width: 100%;
  overflow-x: hidden;
}
.form .form-body {
  padding: 24rem;
  box-shadow: 0 -1.5px 3px rgba(0, 0, 0, 0.1);
  position: relative;
  z-index: 1;
}
.form .form-footer {
  background: var(--color--bg);
  flex: 0 0 auto;
}
.form .form-footer .button {
  width: 100%;
  box-shadow: none;
}
.form .text-content {
  margin-left: var(--input-padding-side);
}
.view-container {
  display: flex;
  height: 100%;
  background: white;
}
.view-wrapper {
  display: flex;
  flex: 1;
  justify-content: center;
  align-items: center;
}
.view-shadow {
  position: relative;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  margin: auto;
  height: 100%;
  width: 100%;
  justify-content: stretch;
  align-items: stretch;
}
body[device-type="desktop"] .view-shadow,
body[device-type="tablet"] .view-shadow {
  max-width: 420px;
  max-height: 700px;
}
.body-content {
  display: flex;
  height: 100%;
}
.page-loader {
  display: none;
  position: fixed;
  left: 0px;
  right: 0px;
  top: 0px;
  bottom: 0px;
  background: white;
  z-index: 1001;
  justify-content: center;
  align-items: center;
}
.page-loader.active {
  display: flex;
}
body:not([has-update]) .update-app {
  display: none;
}
.photo-wrapper {
  width: 100%;
  position: relative;
  margin-top: 16rem;
  display: flex;
  justify-content: center;
  align-items: center;
}
.photo-wrapper .photo-container img {
  display: inline-block;
  max-width: 100%;
  max-height: 280px;
}
.photo-wrapper .photo-placeholder {
  position: absolute;
  height: 100%;
  width: 100%;
  left: 0px;
  top: 0px;
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 1;
  pointer-events: none;
}
.photo-wrapper .photo-placeholder .text-muted {
  display: none;
}
.photo-wrapper .photo-placeholder .a {
  color: rgba(150, 150, 150, 0.7);
}
.photo-wrapper .photo-placeholder .a:before {
  content: "";
  position: absolute;
  top: 0px;
  left: 0px;
  border-top: 5px solid;
  border-left: 5px solid;
  width: 70px;
  height: 70px;
}
.photo-wrapper .photo-placeholder .a:after {
  content: "";
  position: absolute;
  top: 0px;
  right: 0px;
  border-top: 5px solid;
  border-right: 5px solid;
  width: 70px;
  height: 70px;
}
.photo-wrapper .photo-placeholder .b {
  color: rgba(150, 150, 150, 0.7);
}
.photo-wrapper .photo-placeholder .b:before {
  content: "";
  position: absolute;
  bottom: 0px;
  left: 0px;
  border-bottom: 5px solid;
  border-left: 5px solid;
  width: 70px;
  height: 70px;
}
.photo-wrapper .photo-placeholder .b:after {
  content: "";
  position: absolute;
  bottom: 0px;
  right: 0px;
  border-bottom: 5px solid;
  border-right: 5px solid;
  width: 70px;
  height: 70px;
}
.photo-wrapper.full {
  background: #333;
  position: fixed;
  top: 0px;
  left: 0px;
  bottom: 0px;
  right: 0px;
  margin: 0px;
  z-index: 2;
  overflow: hidden;
  transform: scale(1);
}
.photo-wrapper.full .photo-wrapper-fill {
  position: absolute;
  top: 0px;
  height: 0px;
  left: 0px;
  bottom: 0px;
  width: 100%;
  height: 100%;
  display: flex;
}
.photo-wrapper.full .photo-placeholder {
  display: none;
}
.photo-wrapper.full .photo-container {
  margin: auto;
}
.photo-wrapper.empty .photo-placeholder {
  display: flex;
}
.photo-wrapper.empty .photo-placeholder .text-muted {
  display: block;
}
.photo-wrapper.empty .photo-container img {
  height: 280px;
}
:root {
  --color--primary: #FB5354;
  --color--primary-text: var(--color--primary);
  --color--text: #3a3a3a;
  --color--bg: white;
  --color--success: #27BB5B;
  --color--error: #de261f;
  --color--info: #42afca;
  --color--warning: #ca8e1d;
  --color--attention: #eddb3a;
  --color--muted: rgba(145, 145, 145, 0.7);
  --color--uni-25: rgba(162, 162, 162, 0.25);
  --checkbox-size: 1em;
  --checkbox-border-width: 0.15em;
  --checkbox-line-width: 0.2em;
  --divider-color: #ccc;
  --color--autofill: #ffda17 !important;
  --color--backdrop: white;
  --color--modal-bg: white;
  --color--modal-header-bg: var(--color--primary);
  --color--modal-header-text: white;
  --color--badge-bg: #9b9797;
}
.text-muted {
  opacity: 0.5;
}
.text-default {
  color: var(--color--text);
}
.text-primary {
  color: var(--color--primary-text);
}
.text-error {
  color: var(--color--error);
}
.text-success {
  color: var(--color--success);
}
.text-info {
  color: var(--color--info);
}
.text-warning {
  color: var(--color--warning);
}
.text-attention {
  color: var(--color--attention);
}
.text-gray {
  color: rgba(128, 128, 128, 0.7);
}
.bg-primary {
  background-color: var(--color--primary);
}
.bg-error {
  background-color: var(--color--error);
}
.bg-success {
  background-color: var(--color--success);
}
.bg-info {
  background-color: var(--color--info);
}
.bg-warning {
  background-color: var(--color--warning);
}
.bg-attention {
  background-color: var(--color--attention);
}
.bg-gray {
  background-color: rgba(128, 128, 128, 0.7);
}
.bg-muted {
  background-color: rgba(140, 140, 140, 0.4);
}
.text-center {
  text-align: center;
}
.color-error {
  --color: var(--color--error);
}
.color-success {
  --color: var(--color--success);
}
.color-info {
  --color: var(--color--info);
}
.color-warning {
  --color: var(--color--warning);
}
.color-attention {
  --color: var(--color--attention);
}
.color-muted {
  --color: rgba(140, 140, 140, 0.5);
}
.button-round {
  position: relative;
  width: 2em;
  height: 2em;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  border-radius: 100%;
  font-size: 1.3em;
  cursor: pointer;
}
.button-round.highlight {
  background-color: rgba(128, 128, 128, 0.13);
}
.button-round,
.button-round.highlight {
  transition: background 0.3s ease, color 0.3s ease, opacity 0.3s ease;
}
.button-round:hover,
.button-round.highlight:hover {
  background: rgba(188, 188, 188, 0.4);
}
.button-round.active.active,
.button-round.highlight.active.active {
  background: var(--color--primary);
  color: white;
}
.button-round.inline {
  margin: -0.5em -5px -0.5em 0.3em;
  vertical-align: middle;
}
.button-round:disabled {
  opacity: 0.4;
  cursor: not-allowed;
  background: rgba(128, 128, 128, 0.2) !important;
}
.button-round:before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  opacity: 0;
  background-color: rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  border-radius: 100%;
}
.button-round:after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  margin: 0;
  border-radius: 100%;
  color: var(--color--primary);
  opacity: 0;
  box-shadow: 0 0 0 0;
  transition: all 0.3s ease;
  transform: scale(1);
  backface-visibility: hidden;
  z-index: -1;
}
body:not([focus-type="click"]) .button-round:focus:after {
  box-shadow: 0 0 0 2px;
  opacity: 0.3;
}
.button {
  position: relative;
  padding: 16px 0.8em;
  background-color: var(--color--primary);
  color: white;
  width: auto;
  line-height: 1;
  min-width: 80px;
  min-height: 48px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  cursor: pointer;
}
.button.wide {
  width: 100%;
}
.button.default {
  background-color: #fff;
  color: var(--color--primary-text);
}
.button.error {
  background-color: var(--color--error);
}
.button .content {
  position: relative;
  z-index: 1;
}
.button:before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  opacity: 0;
  background-color: rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
}
.button:after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  margin: 0;
  border-radius: 0;
  color: var(--color--primary);
  opacity: 0;
  box-shadow: 0 0 0 0;
  transition: all 0.3s ease;
  transform: scale(1);
  backface-visibility: hidden;
  z-index: -1;
}
.button:hover:before {
  opacity: 0.5;
}
.button:active:before {
  opacity: 1;
}
.button:active:focus:after {
  box-shadow: 0 0 0 0;
}
.button:focus:after {
  border-radius: 2px;
  box-shadow: 0 0 0 4px;
  opacity: 0.35;
}
.button.outline {
  border: 1px solid currentColor;
  background: transparent;
}
.button.outline.primary {
  color: var(--color--primary);
}
.button:disabled {
  opacity: 0.5;
}
.button:disabled:before {
  opacity: 1;
}
.button.small {
  min-height: 30px;
  padding: 5px 0.8em;
}
@keyframes wdb {
  0% {
    margin: -7px;
    border-width: 7px;
    border-radius: 7px;
    opacity: 0.35;
  }
  100% {
    margin: -10px;
    border-width: 10px;
    border-radius: 10px;
    opacity: 0.05;
  }
}
::placeholder {
  color: #aaa;
  font-weight: 400;
  opacity: 0;
}
:root {
  --input-padding-side: 4rem;
}
label[input] {
  display: block;
  margin-bottom: 10px;
  position: relative;
  transition: all 0.3s ease;
}
label[input] container {
  display: flex;
  position: relative;
  padding: 1.55em var(--input-padding-side) 0.4em;
}
label[input] container .btn-close {
  top: 0.4em;
  right: auto;
  position: relative;
  font-size: 0.8em;
  margin-left: 0.5em;
  flex: 0 0 auto;
}
label[input] select {
  padding-right: 1.25em;
}
label[input] input,
label[input] select,
label[input] textarea {
  appearance: none;
  opacity: 0;
  width: 100%;
  height: auto;
  transition: opacity 0.3s ease;
  caret-color: currentColor;
}
label[input] input::-ms-expand,
label[input] select::-ms-expand,
label[input] textarea::-ms-expand {
  display: none;
}
label[input] textarea {
  resize: none;
  overflow: hidden;
}
label[input] .icon {
  margin-right: var(--input-padding-side);
  order: -1;
  opacity: 0.5;
  display: flex;
  justify-content: center;
  align-items: center;
}
label[input] .icon ~ label {
  left: 2em;
}
label[input] label {
  position: absolute;
  top: 1.5em;
  left: var(--input-padding-side);
  opacity: 0.6;
  transition: all 0.15s ease-in-out;
  transform-origin: 0 50%;
  pointer-events: none;
  user-select: none;
}
label[input].nolabel input {
  opacity: 1;
}
label[input].nolabel input::placeholder {
  opacity: 1;
}
label[input].nolabel label {
  display: none;
}
label[input] box {
  overflow: hidden;
  position: absolute;
  bottom: -1px;
  left: 0;
  right: 0;
  height: 2px;
  box-shadow: inset 0 1px 1px 0 rgba(128, 128, 128, 0.5);
  background-color: transparent;
  transition: all 0.35s ease;
  z-index: 1;
}
label[input] box:after,
label[input] box:before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  height: 1px;
  background-color: var(--color--primary);
  width: 100%;
  transform-origin: center;
  transform: scaleX(0);
  transition: all 0.35s ease;
}
label[input]:hover box {
  box-shadow: inset 0 2px 2px 0 rgba(128, 128, 128, 0.7);
}
label[input]:hover box:after,
label[input]:hover box:before {
  height: 2px !important;
}
label[input] input.focus,
label[input] select.focus,
label[input] textarea.focus,
label[input] input.has-value,
label[input] select.has-value,
label[input] textarea.has-value,
label[input] input.error,
label[input] select.error,
label[input] textarea.error,
label[input] input.ng-not-empty,
label[input] select.ng-not-empty,
label[input] textarea.ng-not-empty,
label[input] input:focus,
label[input] select:focus,
label[input] textarea:focus,
label[input] input:not(:empty),
label[input] select:not(:empty),
label[input] textarea:not(:empty) {
  opacity: 0.85;
}
label[input] input.focus::placeholder,
label[input] select.focus::placeholder,
label[input] textarea.focus::placeholder,
label[input] input.has-value::placeholder,
label[input] select.has-value::placeholder,
label[input] textarea.has-value::placeholder,
label[input] input.error::placeholder,
label[input] select.error::placeholder,
label[input] textarea.error::placeholder,
label[input] input.ng-not-empty::placeholder,
label[input] select.ng-not-empty::placeholder,
label[input] textarea.ng-not-empty::placeholder,
label[input] input:focus::placeholder,
label[input] select:focus::placeholder,
label[input] textarea:focus::placeholder,
label[input] input:not(:empty)::placeholder,
label[input] select:not(:empty)::placeholder,
label[input] textarea:not(:empty)::placeholder {
  opacity: 1;
}
label[input] input.focus ~ label,
label[input] select.focus ~ label,
label[input] textarea.focus ~ label,
label[input] input.has-value ~ label,
label[input] select.has-value ~ label,
label[input] textarea.has-value ~ label,
label[input] input.error ~ label,
label[input] select.error ~ label,
label[input] textarea.error ~ label,
label[input] input.ng-not-empty ~ label,
label[input] select.ng-not-empty ~ label,
label[input] textarea.ng-not-empty ~ label,
label[input] input:focus ~ label,
label[input] select:focus ~ label,
label[input] textarea:focus ~ label,
label[input] input:not(:empty) ~ label,
label[input] select:not(:empty) ~ label,
label[input] textarea:not(:empty) ~ label {
  transform: scale(0.83);
  top: 0.2em;
}
label[input] input.focus ~ .icon ~ label,
label[input] select.focus ~ .icon ~ label,
label[input] textarea.focus ~ .icon ~ label,
label[input] input.has-value ~ .icon ~ label,
label[input] select.has-value ~ .icon ~ label,
label[input] textarea.has-value ~ .icon ~ label,
label[input] input.error ~ .icon ~ label,
label[input] select.error ~ .icon ~ label,
label[input] textarea.error ~ .icon ~ label,
label[input] input.ng-not-empty ~ .icon ~ label,
label[input] select.ng-not-empty ~ .icon ~ label,
label[input] textarea.ng-not-empty ~ .icon ~ label,
label[input] input:focus ~ .icon ~ label,
label[input] select:focus ~ .icon ~ label,
label[input] textarea:focus ~ .icon ~ label,
label[input] input:not(:empty) ~ .icon ~ label,
label[input] select:not(:empty) ~ .icon ~ label,
label[input] textarea:not(:empty) ~ .icon ~ label {
  left: var(--input-padding-side);
}
label[input] input:-webkit-autofill,
label[input] select:-webkit-autofill,
label[input] textarea:-webkit-autofill {
  opacity: 0.85;
}
label[input] input:-webkit-autofill::placeholder,
label[input] select:-webkit-autofill::placeholder,
label[input] textarea:-webkit-autofill::placeholder {
  opacity: 1;
}
label[input] input:-webkit-autofill ~ label,
label[input] select:-webkit-autofill ~ label,
label[input] textarea:-webkit-autofill ~ label {
  transform: scale(0.83);
  top: 0.2em;
}
label[input] input:-webkit-autofill ~ .icon ~ label,
label[input] select:-webkit-autofill ~ .icon ~ label,
label[input] textarea:-webkit-autofill ~ .icon ~ label {
  left: var(--input-padding-side);
}
label[input] input:-moz-autofill,
label[input] select:-moz-autofill,
label[input] textarea:-moz-autofill {
  opacity: 0.85;
}
label[input] input:-moz-autofill::placeholder,
label[input] select:-moz-autofill::placeholder,
label[input] textarea:-moz-autofill::placeholder {
  opacity: 1;
}
label[input] input:-moz-autofill ~ label,
label[input] select:-moz-autofill ~ label,
label[input] textarea:-moz-autofill ~ label {
  transform: scale(0.83);
  top: 0.2em;
}
label[input] input:-moz-autofill ~ .icon ~ label,
label[input] select:-moz-autofill ~ .icon ~ label,
label[input] textarea:-moz-autofill ~ .icon ~ label {
  left: var(--input-padding-side);
}
label[input] input:-ms-autofill,
label[input] select:-ms-autofill,
label[input] textarea:-ms-autofill {
  opacity: 0.85;
}
label[input] input:-ms-autofill::placeholder,
label[input] select:-ms-autofill::placeholder,
label[input] textarea:-ms-autofill::placeholder {
  opacity: 1;
}
label[input] input:-ms-autofill ~ label,
label[input] select:-ms-autofill ~ label,
label[input] textarea:-ms-autofill ~ label {
  transform: scale(0.83);
  top: 0.2em;
}
label[input] input:-ms-autofill ~ .icon ~ label,
label[input] select:-ms-autofill ~ .icon ~ label,
label[input] textarea:-ms-autofill ~ .icon ~ label {
  left: var(--input-padding-side);
}
label[input] input:autofill,
label[input] select:autofill,
label[input] textarea:autofill {
  opacity: 0.85;
}
label[input] input:autofill::placeholder,
label[input] select:autofill::placeholder,
label[input] textarea:autofill::placeholder {
  opacity: 1;
}
label[input] input:autofill ~ label,
label[input] select:autofill ~ label,
label[input] textarea:autofill ~ label {
  transform: scale(0.83);
  top: 0.2em;
}
label[input] input:autofill ~ .icon ~ label,
label[input] select:autofill ~ .icon ~ label,
label[input] textarea:autofill ~ .icon ~ label {
  left: var(--input-padding-side);
}
label[input] input.focus ~ label,
label[input] select.focus ~ label,
label[input] textarea.focus ~ label,
label[input] input:focus ~ label,
label[input] select:focus ~ label,
label[input] textarea:focus ~ label {
  opacity: 1;
  color: currentColor;
}
label[input] input.focus ~ box,
label[input] select.focus ~ box,
label[input] textarea.focus ~ box,
label[input] input:focus ~ box,
label[input] select:focus ~ box,
label[input] textarea:focus ~ box {
  box-shadow: inset 0 2px 0 0 rgba(128, 128, 128, 0.5);
}
label[input] input.focus ~ box:after,
label[input] select.focus ~ box:after,
label[input] textarea.focus ~ box:after,
label[input] input:focus ~ box:after,
label[input] select:focus ~ box:after,
label[input] textarea:focus ~ box:after,
label[input] input.focus ~ box:before,
label[input] select.focus ~ box:before,
label[input] textarea.focus ~ box:before,
label[input] input:focus ~ box:before,
label[input] select:focus ~ box:before,
label[input] textarea:focus ~ box:before {
  transform: scaleX(1);
  height: 2px;
}
label[input].dropdown container {
  padding-right: 2em;
}
label[input].dropdown container:before {
  content: "";
  position: absolute;
  bottom: 0.75em;
  right: var(--input-padding-side);
  width: 0;
  height: 0;
  border-style: solid;
  border-width: 5px 4px 0 4px;
  border-color: #707070 transparent transparent transparent;
}
label[input] input.error ~ label,
label[input] select.error ~ label,
label[input] textarea.error ~ label {
  opacity: 0.85;
  color: var(--color--error);
}
label[input] input.error ~ box,
label[input] select.error ~ box,
label[input] textarea.error ~ box,
label[input] input.error ~ box:after,
label[input] select.error ~ box:after,
label[input] textarea.error ~ box:after {
  background: var(--color--error);
}
label[input] input:disabled ~ label,
label[input] select:disabled ~ label,
label[input] textarea:disabled ~ label {
  opacity: 0.3;
}
label[input] input:disabled ~ box,
label[input] select:disabled ~ box,
label[input] textarea:disabled ~ box {
  opacity: 0.5;
}
label[input] select option {
  color: #333;
}
label[input] select option[value=""],
label[input] select.ng-empty,
label[input] select:invalid {
  color: #aaa;
  font-weight: 400;
}
label[input] select:hover ~ box:before {
  margin-bottom: 1px;
}
label[input] .hint {
  display: block;
  font-size: 0.7em;
  padding: 0rem var(--input-padding-side);
  margin-top: 4rem;
}
label[input] .hint[validation-error] {
  display: none;
}
label[input] .hint[validation-error].active {
  display: block;
}
label[input] .hint.error {
  color: var(--color--error);
}
label[input] input:-webkit-autofill ~ box {
  background-color: transparent !important;
  box-shadow: inset 0 1px 1px 0 rgba(128, 128, 128, 0.5);
}
label[input] input:-moz-autofill ~ box {
  background-color: transparent !important;
  box-shadow: inset 0 1px 1px 0 rgba(128, 128, 128, 0.5);
}
label[input] input:autofill ~ box {
  background-color: transparent !important;
  box-shadow: inset 0 1px 1px 0 rgba(128, 128, 128, 0.5);
}
autocomplete[required] label[input] input ~ label:after,
datepicker[required] label[input] input ~ label:after,
label[input] input:required ~ label:after,
label[input] select:required ~ label:after,
label[input] textarea:required ~ label:after {
  content: "*";
  color: var(--color--error);
  font-size: 0.9em;
  margin-left: 0.125em;
}
[readonly] > .dropdown container:before,
[readonly].dropdown container:before {
  opacity: 0.1;
}
input.focus:-webkit-autofill,
input:-webkit-autofill,
input:-webkit-autofill:active,
input:-webkit-autofill:focus,
input:-webkit-autofill:hover {
  animation: autofill 0s forwards;
}
input.focus:-moz-autofill,
input:-moz-autofill,
input:-moz-autofill:active,
input:-moz-autofill:focus,
input:-moz-autofill:hover {
  animation: autofill 0s forwards;
}
input.focus:autofill,
input:autofill,
input:autofill:active,
input:autofill:focus,
input:autofill:hover {
  animation: autofill 0s forwards;
}
@keyframes autofill {
  100% {
    background: transparent;
    color: inherit;
  }
}
autocomplete {
  display: block;
}
label[input].loading box {
  height: 2px;
  display: block;
  width: 100%;
  box-shadow: inset 0 2px 0 0 rgba(128, 128, 128, 0.25);
}
label[input].loading box:before {
  content: '';
  position: absolute;
  background-color: var(--color--primary);
  color: var(--color--primary);
  top: 0;
  height: 2px;
  width: auto;
  will-change: left, right;
  left: -35%;
  right: 100%;
  transform: scaleX(1);
  opacity: 1;
  animation: indeterminate 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
  z-index: 1;
}
label[input].loading box:after {
  content: '';
  position: absolute;
  background-color: var(--color--primary);
  color: var(--color--primary);
  top: 0;
  height: 2px;
  width: auto;
  will-change: left, right;
  left: -35%;
  right: 100%;
  transform: scaleX(1);
  opacity: 1;
  animation: indeterminate-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;
  animation-delay: 1.15s;
  z-index: 1;
}
@keyframes indeterminate {
  0% {
    left: -35%;
    right: 100%;
  }
  60% {
    left: 100%;
    right: -90%;
  }
  100% {
    left: 100%;
    right: -90%;
  }
}
@keyframes indeterminate-short {
  0% {
    left: -200%;
    right: 100%;
  }
  60% {
    left: 107%;
    right: -8%;
  }
  100% {
    left: 107%;
    right: -8%;
  }
}
@keyframes wd {
  0% {
    transform: scale(1.2);
  }
}
@keyframes pump {
  0% {
    transform: rotate(40deg) scale(0.6);
  }
  25% {
    transform: rotate(40deg) scale(0.65);
  }
  35% {
    transform: rotate(40deg) scale(0.5);
  }
  45% {
    transform: rotate(40deg) scale(0.65);
  }
  55% {
    transform: rotate(40deg) scale(0.6);
  }
  100% {
    transform: rotate(40deg) scale(0.6);
  }
}
.input-block,
label[button-block] {
  display: flex;
  margin-bottom: 0.2em;
  user-select: none;
  padding: 20px;
  background: #3a3a3a;
  background: #fff;
  box-shadow: 0 1px 1px #eee;
  transition: all 0.3s ease;
}
.input-block:hover,
label[button-block]:hover {
  background: #444;
  background: #f4f4f4;
}
label {
  font-weight: inherit;
}
label:active input:not(:disabled) + box {
  animation: wd 0.5s ease forwards;
}
label[button] {
  margin-bottom: 10px;
}
label[button-block],
label[button] {
  user-select: none;
  display: inline-flex;
  outline: none;
  white-space: nowrap;
  position: relative;
}
label[button-block] input[type="checkbox"],
label[button] input[type="checkbox"],
label[button-block] input[type="radio"],
label[button] input[type="radio"] {
  opacity: 0;
  width: 0;
  height: 0;
  left: 0;
  top: 0;
  position: absolute;
  z-index: -1;
}
label[button-block] input[type="checkbox"] + box,
label[button] input[type="checkbox"] + box,
label[button-block] input[type="radio"] + box,
label[button] input[type="radio"] + box {
  position: relative;
  display: inline-block;
  flex: 0 0 auto;
  vertical-align: middle;
  font-size: var(--checkbox-size);
  width: 1.34em;
  height: 1.34em;
  border: var(--checkbox-border-width) solid;
  transition: all 0.3s ease;
  color: var(--color--primary);
  border-color: rgba(0, 0, 0, 0.2);
  background: rgba(255, 255, 255, 0.15);
}
label[button-block] input[type="checkbox"] + box:before,
label[button] input[type="checkbox"] + box:before,
label[button-block] input[type="radio"] + box:before,
label[button] input[type="radio"] + box:before {
  content: "";
  position: absolute;
  border-radius: inherit;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  opacity: 0;
  transition: all 0.3s ease;
}
label[button-block] input[type="checkbox"] + box:after,
label[button] input[type="checkbox"] + box:after,
label[button-block] input[type="radio"] + box:after,
label[button] input[type="radio"] + box:after {
  content: "";
  position: absolute;
  display: block;
  background: currentColor;
  width: 100%;
  height: 100%;
  border: var(--checkbox-line-width) solid;
  transform: scale(0.2);
  opacity: 0;
  color: #aaa;
  transition: all 0.3s ease;
}
label[button-block] input[type="checkbox"]:checked + box,
label[button] input[type="checkbox"]:checked + box,
label[button-block] input[type="radio"]:checked + box,
label[button] input[type="radio"]:checked + box {
  border-color: currentColor;
  box-shadow: inset 0 0 0.05em rgba(0, 0, 0, 0.1);
}
label[button-block] input[type="checkbox"]:checked + box:after,
label[button] input[type="checkbox"]:checked + box:after,
label[button-block] input[type="radio"]:checked + box:after,
label[button] input[type="radio"]:checked + box:after {
  color: currentColor;
  transform: scale(0.5);
  opacity: 1;
}
label[button-block]:hover input:not(:disabled) + box,
label[button]:hover input:not(:disabled) + box,
label[button-block] input:not(:disabled):focus + box,
label[button] input:not(:disabled):focus + box {
  border-color: currentColor;
  box-shadow: inset 0 0 0.05em rgba(0, 0, 0, 0.1);
}
label[button-block]:hover input:not(:disabled) + box:after,
label[button]:hover input:not(:disabled) + box:after {
  opacity: 1;
}
label[button-block] input ~ *,
label[button] input ~ * {
  cursor: default;
}
label[button-block] input:disabled ~ *,
label[button] input:disabled ~ * {
  cursor: not-allowed;
}
label[button-block] input + box + span,
label[button] input + box + span {
  display: inline-block;
  padding: 2px 12px;
  vertical-align: middle;
  white-space: normal;
  margin-left: -4px;
  margin-right: -4px;
}
label[button-block] input:focus + box:before,
label[button] input:focus + box:before {
  margin: -0.1em;
  border-radius: 100%;
  box-shadow: 0 0 0 0.5em currentColor;
  opacity: 0.3;
  z-index: 0;
}
label[button-block] input[type="radio"] + box,
label[button] input[type="radio"] + box {
  border-radius: 100%;
}
label[button-block] input[type="radio"] + box:after,
label[button] input[type="radio"] + box:after {
  border-radius: 100%;
}
label[button-block] input[type="checkbox"] + box,
label[button] input[type="checkbox"] + box {
  border-radius: 0.2em;
}
label[button-block] input[type="checkbox"] + box:after,
label[button] input[type="checkbox"] + box:after {
  border-top: 0;
  border-left: 0;
  background: none;
  left: 22%;
  top: -7%;
  width: 55%;
  transform: rotate(39deg) scale(0.5);
  transition: all 0.2s ease;
}
label[button-block] input[type="checkbox"]:checked + box:after,
label[button] input[type="checkbox"]:checked + box:after {
  transform: rotate(41deg) scale(0.7);
}
label[button-block] input:disabled + box,
label[button] input:disabled + box {
  background: rgba(0, 0, 0, 0.07);
  color: rgba(0, 0, 0, 0.2) !important;
  border-color: rgba(0, 0, 0, 0.1) !important;
}
label[button-block] input:disabled + box:after,
label[button] input:disabled + box:after {
  border-color: rgba(0, 0, 0, 0.2) !important;
}
label[button-block] input:disabled + box + span,
label[button] input:disabled + box + span {
  color: rgba(0, 0, 0, 0.3) !important;
}
label[button-block] input.slide.slide.slide + box,
label[button] input.slide.slide.slide + box {
  width: 2.5em;
  border-radius: 0.7em;
}
label[button-block] input.slide.slide.slide + box:after,
label[button] input.slide.slide.slide + box:after {
  border: none;
  width: 50%;
  height: auto;
  top: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  color: inherit;
  border-radius: 100%;
  left: 0.03em;
  opacity: 0.7;
  transform: scale(0.9);
  transition: all 0.3s ease;
}
label[button-block] input.slide.slide.slide:not(:disabled):focus + box:after,
label[button] input.slide.slide.slide:not(:disabled):focus + box:after,
label[button-block] input.slide.slide.slide:not(:disabled):hover + box:after,
label[button] input.slide.slide.slide:not(:disabled):hover + box:after {
  background: currentColor;
}
label[button-block] input.slide.slide.slide:checked + box:after,
label[button] input.slide.slide.slide:checked + box:after {
  background: currentColor;
  left: 1.06em;
  opacity: 1;
}
label[button-block] input.slide.slide.slide:focus + box:before,
label[button] input.slide.slide.slide:focus + box:before {
  border-radius: 0.7em;
}
label[button-block].inversed input[type="radio"] + box:after,
label[button].inversed input[type="radio"] + box:after {
  transition: all 0.3s ease, transform 0.15s 0.15s ease;
}
label[button-block].inversed input[type="checkbox"] + box:after,
label[button].inversed input[type="checkbox"] + box:after {
  transition: all 0.3s ease, transform 0.15s 0.15s ease;
}
label[button-block].inversed input:checked + box,
label[button].inversed input:checked + box,
label[button-block].inversed input.slide.slide.slide:checked + box,
label[button].inversed input.slide.slide.slide:checked + box {
  border-color: currentColor;
  background: currentColor;
}
label[button-block].inversed input:checked + box:after,
label[button].inversed input:checked + box:after,
label[button-block].inversed input.slide.slide.slide:checked + box:after,
label[button].inversed input.slide.slide.slide:checked + box:after {
  color: white;
}
label[button-block].inversed input:disabled:checked + box,
label[button].inversed input:disabled:checked + box,
label[button-block].inversed input.slide.slide.slide:disabled:checked + box,
label[button].inversed input.slide.slide.slide:disabled:checked + box {
  border-color: rgba(0, 0, 0, 0) !important;
  background: rgba(0, 0, 0, 0.2) !important;
}
label[button-block].inversed input:disabled:checked + box:after,
label[button].inversed input:disabled:checked + box:after,
label[button-block].inversed input.slide.slide.slide:disabled:checked + box:after,
label[button].inversed input.slide.slide.slide:disabled:checked + box:after {
  color: white !important;
}
.notification-bar {
  padding: 0;
  text-align: right;
  position: fixed;
  top: 0;
  right: 0;
  width: 30em;
  z-index: 1051;
  height: 100vh;
  pointer-events: none;
}
.notification-bar > .content {
  display: flex;
  position: absolute;
  pointer-events: none;
  padding-top: 45px;
  height: 100%;
  width: 100%;
  top: 0;
  padding-right: 10px;
  flex-direction: column;
}
.notification-bar > .content .common {
  flex: 0 0 auto;
}
.notification-bar > .content .notification-list {
  flex: 0 1 auto;
  text-align: left;
  list-style: none;
  margin: 0;
  overflow: hidden;
  overflow-y: auto;
  pointer-events: auto;
}
.notification-bar > .content .notification-list .notification-item {
  pointer-events: auto;
  margin-bottom: 10px;
}
.notification-bar > .content .close-all {
  pointer-events: auto;
  display: inline-block;
  background: rgba(255, 255, 255, 0.95);
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.15);
  margin: 5px 0 8px;
  /*border-radius: 5px;*/
}
.notification-bar > .content .close-all a {
  display: inline-block;
  text-decoration: none;
  padding: 5px 15px;
}
.notification-bar.left > .content {
  right: auto;
  left: 0;
}
.notification-bar.bottom > .content {
  top: auto;
  bottom: 0;
  margin: 0;
}
.notification {
  position: relative;
  word-wrap: break-word;
  padding: 0.8em 1.5em;
  border: 1px solid transparent;
  border-radius: 0;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
}
.notification .btn-close {
  top: 0.95em;
}
.notification .notification-content {
  max-height: 40vh;
  overflow: hidden;
  overflow-y: auto;
  width: 96%;
}
.notification:not(:last-child) {
  margin-bottom: 5px;
}
.notification h4 {
  margin-top: 0;
  color: inherit;
}
.notification > ul,
.notification > p {
  margin-bottom: 0;
}
.notification > p + p {
  margin-top: 5px;
}
.notification-dismissable,
.notification-dismissible {
  padding-right: 30px;
}
.notification-dismissable .close,
.notification-dismissible .close {
  position: relative;
  top: -2px;
  right: -21px;
  color: inherit;
}
.notification-success {
  background-color: var(--color--success);
  border-color: var(--color--success);
  color: white;
  font-size: 16px;
}
.notification-success hr {
  border-top-color: var(--color--success);
}
.notification-success .alert-link {
  color: white;
}
.notification-info {
  background-color: var(--color--info);
  border-color: var(--color--info);
  color: white;
  font-size: 16px;
}
.notification-info hr {
  border-top-color: var(--color--info);
}
.notification-info .alert-link {
  color: white;
}
.notification-warning {
  background-color: var(--color--warning);
  border-color: var(--color--warning);
  color: white;
  font-size: 16px;
}
.notification-warning hr {
  border-top-color: var(--color--warning);
}
.notification-warning .alert-link {
  color: white;
}
.notification-danger {
  background-color: var(--color--error);
  border-color: var(--color--error);
  color: white;
  font-size: 16px;
}
.notification-danger hr {
  border-top-color: var(--color--error);
}
.notification-danger .alert-link {
  color: white;
}
.badge {
  color: white;
  border-radius: 10px;
  background-color: var(--color--badge-bg);
  display: inline-block;
  font-size: 12px;
  padding: 3px 7px;
  vertical-align: middle;
}
.badge.muted {
  --color--badge-bg: var(--color--muted);
}
.badge.success {
  --color--badge-bg: var(--color--success);
}
.badge.error {
  --color--badge-bg: var(--color--error);
}
.badge.warning {
  --color--badge-bg: var(--color--warning);
}
.badge.attention {
  --color--badge-bg: var(--color--attention);
}
.badge.info {
  --color--badge-bg: var(--color--info);
}
.badge.primary {
  --color--badge-bg: var(--color--primary);
}
mini-loader {
  color: var(--color--primary);
  display: block;
  --color--current: currentColor;
}
.mini-loader {
  position: relative;
  margin: 0 auto;
  width: 2em;
}
.mini-loader:before {
  content: '';
  display: block;
  padding-top: 100%;
}
.mini-loader svg {
  animation: rotate 2s linear infinite;
  height: 100%;
  transform-origin: center center;
  width: 100%;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto;
}
.mini-loader svg .path {
  stroke-dasharray: 1, 200;
  stroke-dashoffset: 0;
  animation: dash 1.5s ease-in-out infinite, color 6s ease-in-out infinite;
  stroke-linecap: square;
  stroke-width: 0.2em;
}
mini-loader[large] {
  font-size: 3em;
}
mini-loader[large] svg .path {
  stroke-width: 4;
}
@keyframes rotate {
  100% {
    transform: rotate(360deg);
  }
}
@keyframes dash {
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0;
  }
  50% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -35px;
  }
  100% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -124px;
  }
}
@keyframes color {
  0%,
  100% {
    stroke: var(--color--current);
  }
  40% {
    stroke: var(--color--current);
  }
  66% {
    stroke: var(--color--current);
  }
  80%,
  90% {
    stroke: var(--color--current);
  }
}
::selection {
  background: var(--color--primary);
  color: white;
}
::-moz-selection {
  background: var(--color--primary);
  color: white;
}
.typo b,
.typo strong {
  font-weight: 700;
  color: #000000;
}
.typo em,
.typo i {
  font-style: italic;
}
.typo h1 {
  font-size: 24rem;
  margin-bottom: 12rem;
  line-height: normal;
  color: #000000;
}
.typo h2 {
  font-size: 18rem;
  font-weight: 600;
  margin-bottom: 24rem;
  line-height: normal;
  color: #000000;
}
.typo p {
  margin-bottom: 16rem;
}
.typo li,
.typo p {
  line-height: 19rem;
}
.typo hr {
  border-top: 1px solid;
  color: #979797;
  margin-top: 16rem;
  margin-bottom: 24rem;
  opacity: 0.5;
}
.typo a {
  text-decoration: underline;
  color: var(--color--primary-text);
  line-height: 19rem;
}
.typo ul {
  padding-left: 16rem;
  margin: 24rem 0;
  list-style: none;
}
.typo ol {
  padding-left: 0;
  margin: 16rem 0;
  list-style: none;
}
.typo li {
  margin-bottom: 12rem;
  position: relative;
}
.typo ol {
  counter-reset: my-counter;
}
.typo ol li {
  counter-increment: my-counter;
  padding-left: 20rem;
}
.typo ul li {
  padding-left: 35rem;
}
.typo ol li::before {
  content: counter(my-counter);
  display: inline-block;
  position: absolute;
  line-height: normal;
  text-align: left;
  color: #808080;
  font-weight: 700;
  left: 0;
  font-size: inherit;
  line-height: inherit;
}
.typo ul li::before {
  content: "";
  display: block;
  width: 8rem;
  height: 8rem;
  border-radius: 50%;
  background: var(--color--primary);
  line-height: normal;
  position: absolute;
  left: 0;
  top: 5rem;
  text-align: left;
}
.typo .main-block {
  margin: auto;
  max-width: 100%;
  position: relative;
}
.typo .detail {
  font-size: 14rem;
  line-height: 1.36;
  margin-bottom: 0;
  color: #808080;
}
.typo .main-image-wrapper {
  text-align: center;
  margin-top: 24rem;
  margin-bottom: 16rem;
}
.typo .main-image-wrapper.middle {
  margin: 24rem 30rem 16rem;
}
.typo .main-image-wrapper.small {
  margin: 24rem 65rem 16rem;
}
.typo .main-image {
  max-width: 100%;
}
.typo .alert {
  border-radius: 16rem;
  padding: 16rem;
  line-height: 19rem;
  font-size: 14rem;
  margin-top: 24rem;
  position: relative;
  text-align: center;
  background: #EEF6FF;
  color: #6B8099;
}
.typo .main-block {
  flex: 1 1 100%;
}
.typo .icon-list-wrapper {
  margin-top: 24rem;
  margin-bottom: 24rem;
}
.typo .icon-list-item {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  margin-bottom: 16rem;
}
.typo .icon-list-item p {
  margin-bottom: 0;
}
.typo .icon-img {
  width: 40rem;
  min-width: 40rem;
  display: block;
  margin-right: 12rem;
}
::-webkit-scrollbar {
  width: 3px;
  height: 3px;
  background: transparent;
}
::-webkit-scrollbar * {
  background: transparent;
}
::-webkit-scrollbar-button {
  width: 0px;
  height: 0px;
  background: transparent;
}
::-webkit-scrollbar-thumb {
  background: var(--color--primary);
  border: none;
  border-radius: 0px;
}
::-webkit-scrollbar-thumb:hover {
  background: var(--color--primary);
}
::-webkit-scrollbar-thumb:active {
  background: var(--color--primary);
}
::-webkit-scrollbar-corner,
::-webkit-scrollbar-track {
  background: transparent;
  border: none;
  border-radius: 0px;
}
::-webkit-scrollbar-track:hover {
  background: transparent;
}
::-webkit-scrollbar-track:active {
  background: transparent;
}
::-webkit-scrollbar-corner {
  background: transparent;
}
@keyframes card-shadow-red-move {
  0% {
    top: 45%;
    left: 25%;
  }
  50% {
    top: 60%;
    left: 80%;
  }
  100% {
    top: 45%;
    left: 25%;
  }
}
@keyframes card-shadow-yellow-move {
  0% {
    right: 25%;
    bottom: 35%;
  }
  50% {
    right: 90%;
    bottom: 60%;
  }
  100% {
    right: 25%;
    bottom: 35%;
  }
}
@keyframes card-shadow {
  0% {
    box-shadow: 0 0 10px 0px rgba(85, 85, 85, 0.2);
  }
  50% {
    box-shadow: 0 0 45px 10px rgba(85, 85, 85, 0.2);
  }
  100% {
    box-shadow: 0 0 10px 0px rgba(85, 85, 85, 0.2);
  }
}
@keyframes card-shadow-red {
  0% {
    box-shadow: 0 0 111px 38px rgba(251, 83, 84, 0.7);
  }
  30% {
    box-shadow: 0 0 80px 30px rgba(251, 83, 84, 0.7);
  }
  67% {
    box-shadow: 0 0 210px 110px rgba(251, 83, 84, 0.7);
  }
  100% {
    box-shadow: 0 0 111px 38px rgba(251, 83, 84, 0.7);
  }
}
@keyframes card-shadow-yellow {
  0% {
    box-shadow: 0 0 121px 60px rgba(251, 83, 84, 0.7);
  }
  30% {
    box-shadow: 0 0 210px 110px rgba(251, 83, 84, 0.7);
  }
  100% {
    box-shadow: 0 0 121px 60px rgba(251, 83, 84, 0.7);
  }
}
.view-shadow.active {
  position: relative;
}
.view-shadow.active > .shadow-red {
  display: block;
  width: 3px;
  height: 3px;
  position: absolute;
  z-index: -1;
  animation: card-shadow-red-move 20s ease infinite;
  animation-delay: -20s;
}
.view-shadow.active > .shadow-red:before {
  content: "";
  position: absolute;
  z-index: -1;
  border-radius: 100%;
  animation: card-shadow-red 14s ease infinite;
  animation-delay: -45s;
}
.view-shadow.active > .shadow-yellow {
  display: block;
  width: 3px;
  height: 3px;
  position: absolute;
  z-index: -1;
  animation: card-shadow-yellow-move 15s ease infinite;
}
.view-shadow.active > .shadow-yellow:before {
  content: "";
  position: absolute;
  z-index: -1;
  border-radius: 100%;
  animation: card-shadow-yellow 10s ease infinite;
}
.view-shadow.active > .shadow {
  position: absolute;
  top: 0px;
  left: 0px;
  right: 0px;
  height: 100%;
  z-index: -1;
  animation: card-shadow 8s linear infinite;
}
